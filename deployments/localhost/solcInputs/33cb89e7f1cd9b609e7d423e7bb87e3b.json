{
  "language": "Solidity",
  "sources": {
    "contracts/copyFundme.sol": {
      "content": "// /* ANCHOR this file is a copy of main fundme to show style guide and to remove extra comments from main file*/\n\n// // NOTE Lesson -> Style guide(SG) of solidity to make it more readable and professional\n\n// // SPDX-License-Identifier: GPL-3.0\n// //ANCHOR-1 Pragma (SG)\n// pragma solidity ^0.8.0;\n\n// //ANCHOR-2 Imports (SG)\n// import \"./priceConverter.sol\";\n\n// //ANCHOR-3 Error Codes (SG)\n// error FundMe__NotOwner(); //NOTE best practice => add contract name as prefix in custom errors so end user can identify which contract is throwing the error\n\n// //ANCHOR-4 Interfaces(4), Libraries(5), Contracts(6)  (SG)\n\n// //ANCHOR-(optional) \"NatSpec Format\" `ehtereum natural language specification format (NatSpec)\n// // NOTE it's a way to documenting our code by using some commnets and tags properly\n// // NOTE @dev is a way to explain something to developers\n// // NOTE use NatSpec when you think something is compicated that others can't understand\n\n// /** @title A contract for crowd funding\n//  *  @author Rohit Kumar Suman\n//  *  @notice This contract is to demo a sample funding contract\n//  *  @dev This implements price feeds as our library\n//  */\n// contract FundMe {\n//     //ANCHOR-7 Type Declarations (SG)\n//     // SECTION PriceConverter library used here for uint256 type\n//     using PriceConverter for uint256;\n\n//     //ANCHOR-8 State Variables! (SG)\n//     // NOTE Whenever you are declaring a State variable, consider adding \"s_\" prefix in the name of that variable to show, that they will gonna store in storage of contract but not in \"constant & immutable\" variable.\n//     // SECTION state variable\n//     uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n//     // SECTION array & mapping to keep track of address\n//     address[] public s_funders;\n//     mapping(address => uint256) public s_addressToAmountFunded;\n\n//     address public immutable i_owner;\n\n//     // SECTION priceFeed object\n//     AggregatorV3Interface public s_priceFeed;\n\n//     //ANCHOR-9 Events(9), Modifier(10)  (SG)\n//     // SECTION modifier\n//     modifier onlyOwner() {\n//         // require (msg.sender == i_owner, \"Withdrawal is not owner\");  //Replaced with Custom Error\\\\\n//         if (msg.sender != i_owner) {\n//             revert FundMe__NotOwner();\n//         }\n//         _;\n//     }\n\n//     //ANCHOR-11 Functions Order: (SG)\n//     /// constructor\n//     /// receive\n//     /// fallback\n//     /// external\n//     /// public\n//     /// internal\n//     /// private\n//     /// view / pure\n\n//     // SECTION constructor\n//     // TODO adding chainlink priceFeed address for different chains as parameter here\n//     constructor(address s_priceFeedAdress) {\n//         i_owner = msg.sender;\n//         s_priceFeed = AggregatorV3Interface(s_priceFeedAdress);\n//     }\n\n//     //SECTION receive\n//     // receive() external payable {\n//     //     fund();\n//     // }\n\n//     //SECTION fallback\n//     // fallback() external payable {\n//     //     fund();\n//     // }\n\n//     /**\n//      *  @notice This function funds this contract\n//      *  @dev This implements price feeds as our library\n//      *  if you have parameters than add 'at the rate' param\n//      *  if you have returns than add 'at the rate' return\n//      */\n//     // SECTION fund function\n//     function fund() public payable {\n//         require(\n//             // NOTE 2nd parameter should be added in getConversionRate parenthesis\n//             msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n//             \"Don't Have Enough Eth\"\n//         );\n//         s_funders.push(msg.sender);\n//         s_addressToAmountFunded[msg.sender] += msg.value;\n//     }\n\n//     // SECTION withdraw function\n//     function withdraw() public payable onlyOwner {\n//         // NOTE reading array values from storage which cost more Gas\n//         for (\n//             uint256 funderIndex = 0;\n//             funderIndex < s_funders.length;\n//             funderIndex++\n//         ) {\n//             address funder = s_funders[funderIndex];\n//             s_addressToAmountFunded[funder] = 0;\n//         }\n//         s_funders = new address[](0);\n\n//         (bool callSuccess, ) = payable(msg.sender).call{\n//             value: address(this).balance\n//         }(\"\");\n//         require(callSuccess, \"Call failed\");\n//     }\n\n//     // SECTION creating Cheaper Withdraw function, its gas efficient.\n//     function cheaperWithdraw() public payable onlyOwner {\n//         // NOTE reading array all values from storage once and then from memory of functions which costs less Gas by saving \"funders\" array into memory\n//         address[] memory funders = s_funders;\n//         // NOTE mappings can't be in memory!!\n//         for (\n//             uint256 funderIndex = 0;\n//             funderIndex < funders.length;\n//             funderIndex++\n//         ) {\n//             address funder = funders[funderIndex];\n//             s_addressToAmountFunded[funder] = 0;\n//         }\n//         // TODO update the state variable again\n//         s_funders = new address[](0);\n\n//         (bool callSuccess, ) = payable(msg.sender).call{\n//             value: address(this).balance\n//         }(\"\");\n//         require(callSuccess, \"Call failed\");\n//     }\n// }\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./priceConverter.sol\";\n\nerror FundMe__NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    // SECTION state variables\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    address[] private s_funders;\n\n    mapping(address => uint256) private s_addressToAmountFunded;\n\n    address private immutable i_owner;\n\n    AggregatorV3Interface private s_priceFeed;\n\n    // SECTION functions\n\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    constructor(address s_priceFeedAdress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAdress);\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n            \"Don't Have Enough Eth\"\n        );\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function withdraw() public payable onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    function cheaperWithdraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 arrayIndex) public view returns (address) {\n        return s_funders[arrayIndex];\n    }\n\n    function getAddressToAmountFunded(address fundingAddress)\n        public\n        view\n        returns (uint256)\n    {\n        return s_addressToAmountFunded[fundingAddress];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/priceConverter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.8;\n\n// chainlink to get real world ether price in USD\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface s_priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int price, , , ) = s_priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface s_priceFeed\n    ) internal view returns (uint256) {\n        // when we call getPrice() we can add priceFeed of FundMe.sol\n        uint256 ethPrice = getPrice(s_priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}